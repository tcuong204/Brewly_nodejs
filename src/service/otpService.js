import redisClient from "../config/redis.js";
import transporter from "../config/email.js";

class OTPService {
  constructor() {
    this.OTP_PREFIX = "otp:";
    this.ATTEMPTS_PREFIX = "otp:attempts:";
    this.RATELIMIT_PREFIX = "otp:ratelimit:";
    this.OTP_EXPIRY = 300; // 5 ph√∫t
    this.MAX_ATTEMPTS = 3;
    this.MAX_REQUESTS = 3;
  }

  // T·∫°o OTP ng·∫´u nhi√™n
  generateOTP() {
    return Math.floor(100000 + Math.random() * 900000).toString();
  }

  // Ki·ªÉm tra rate limit
  async checkRateLimit(email) {
    const key = this.RATELIMIT_PREFIX + email;
    const count = await redisClient.get(key);

    if (count && parseInt(count) >= this.MAX_REQUESTS) {
      const ttl = await redisClient.ttl(key);
      throw new Error(
        `V∆∞·ª£t qu√° gi·ªõi h·∫°n. Th·ª≠ l·∫°i sau ${Math.ceil(ttl / 60)} ph√∫t`
      );
    }

    return true;
  }

  // TƒÉng rate limit counter
  async incrementRateLimit(email) {
    const key = this.RATELIMIT_PREFIX + email;
    const count = await redisClient.get(key);

    if (count) {
      await redisClient.incr(key);
    } else {
      await redisClient.setEx(key, this.OTP_EXPIRY, "1");
    }
  }

  // L∆∞u OTP v√†o Redis
  async saveOTP(email, otp) {
    const key = this.OTP_PREFIX + email;
    await redisClient.setEx(key, this.OTP_EXPIRY, otp);
    console.log(`‚úÖ OTP saved: ${key} = ${otp} (TTL: ${this.OTP_EXPIRY}s)`);
  }

  // L·∫•y OTP t·ª´ Redis
  async getOTP(email) {
    const key = this.OTP_PREFIX + email;
    const otp = await redisClient.get(key);
    console.log(`üîç Get OTP: ${key} = ${otp}`);
    return otp;
  }

  // X√≥a OTP
  async deleteOTP(email) {
    const otpKey = this.OTP_PREFIX + email;
    const attemptsKey = this.ATTEMPTS_PREFIX + email;
    await redisClient.del([otpKey, attemptsKey]);
    console.log(`üóëÔ∏è Deleted OTP: ${otpKey}`);
  }

  // Ki·ªÉm tra s·ªë l·∫ßn th·ª≠ sai
  async checkAttempts(email) {
    const key = this.ATTEMPTS_PREFIX + email;
    const attempts = await redisClient.get(key);

    if (attempts && parseInt(attempts) >= this.MAX_ATTEMPTS) {
      throw new Error("ƒê√£ nh·∫≠p sai OTP qu√° 3 l·∫ßn. Vui l√≤ng y√™u c·∫ßu OTP m·ªõi");
    }
  }

  // TƒÉng s·ªë l·∫ßn th·ª≠ sai
  async incrementAttempts(email) {
    const key = this.ATTEMPTS_PREFIX + email;
    const attempts = await redisClient.get(key);

    if (attempts) {
      await redisClient.incr(key);
    } else {
      await redisClient.setEx(key, this.OTP_EXPIRY, "1");
    }
  }

  // Ki·ªÉm tra TTL c√≤n l·∫°i
  async getTTL(email) {
    const key = this.OTP_PREFIX + email;
    const ttl = await redisClient.ttl(key);
    return ttl;
  }

  // G·ª≠i OTP qua email
  async sendOTPEmail(email, otp) {
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: "üîê M√£ OTP x√°c th·ª±c",
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
            <h1 style="color: white; margin: 0;">üîê X√°c th·ª±c OTP</h1>
          </div>
          <div style="background: #f9f9f9; padding: 40px; border-radius: 0 0 10px 10px;">
            <p style="font-size: 16px; color: #333;">M√£ OTP c·ªßa b·∫°n l√†:</p>
            <div style="background: white; padding: 20px; border-radius: 8px; text-align: center; margin: 20px 0; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
              <h1 style="color: #667eea; letter-spacing: 10px; margin: 0; font-size: 42px; font-weight: bold;">${otp}</h1>
            </div>
            <p style="color: #666; font-size: 14px;">
              ‚è±Ô∏è M√£ n√†y c√≥ hi·ªáu l·ª±c trong <strong style="color: #d9534f;">5 ph√∫t</strong>
            </p>
            <p style="color: #999; font-size: 12px; margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd;">
              ‚ö†Ô∏è N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu m√£ n√†y, vui l√≤ng b·ªè qua email n√†y.
            </p>
          </div>
        </div>
      `,
    };

    await transporter.sendMail(mailOptions);
    console.log(`üìß Email sent to: ${email}`);
  }

  // G·ª≠i OTP - Flow ho√†n ch·ªânh
  async sendOTP(email) {
    // 1. Ki·ªÉm tra rate limit
    await this.checkRateLimit(email);

    // 2. T·∫°o OTP
    const otp = this.generateOTP();

    // 3. L∆∞u v√†o Redis
    await this.saveOTP(email, otp);

    // 4. TƒÉng rate limit
    await this.incrementRateLimit(email);

    // 5. G·ª≠i email
    await this.sendOTPEmail(email, otp);

    return {
      success: true,
      message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email",
      expiresIn: this.OTP_EXPIRY,
    };
  }

  // Verify OTP - Flow ho√†n ch·ªânh
  async verifyOTP(email, otp) {
    // 1. Ki·ªÉm tra s·ªë l·∫ßn th·ª≠
    await this.checkAttempts(email);

    // 2. L·∫•y OTP t·ª´ Redis
    const storedOTP = await this.getOTP(email);

    // 3. Ki·ªÉm tra OTP c√≥ t·ªìn t·∫°i
    if (!storedOTP) {
      throw new Error("OTP kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n");
    }

    // 4. So s√°nh OTP
    if (storedOTP !== otp) {
      await this.incrementAttempts(email);
      const key = this.ATTEMPTS_PREFIX + email;
      const attempts = await redisClient.get(key);
      throw new Error(`OTP kh√¥ng ch√≠nh x√°c (${attempts}/${this.MAX_ATTEMPTS})`);
    }

    // 5. X√≥a OTP sau khi verify th√†nh c√¥ng
    await this.deleteOTP(email);

    // 6. X√≥a rate limit
    await redisClient.del(this.RATELIMIT_PREFIX + email);

    return {
      success: true,
      message: "X√°c th·ª±c OTP th√†nh c√¥ng",
    };
  }
}

export default new OTPService();
